# -*- coding: utf-8 -*-
"""HandsOn.2_OrtegaVegaAngelIgnacio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mrzjs9RwHTnlddEC0GScB6YwezsFsvXQ
"""

import numpy as np

# Datasets
sales = np.array([651, 762, 856, 1063, 1190, 1298, 1421, 1440, 1518])
advertising = np.array([23, 26, 30, 34, 43, 48, 52, 57, 58])

# Proceso

class LinearRegression:
    def __init__(self):
        self.slope = None
        self.b0 = None
        self.b1 = None

    def calcular(self, x, y):
        n = len(x)
        x_sum = np.sum(x)
        y_sum = np.sum(y)
        x2_sum = np.sum(x**2)
        xy_sum = np.sum(x*y)

        x2_sum_y_sum = x2_sum * y_sum
        x_sum_xy_sum = x_sum * xy_sum
        n_x2_sum = n * x2_sum
        x_sum_2 = x_sum**2
        n_xy_sum = n * xy_sum
        x_sum_y_sum = x_sum * y_sum

        self.b0 = (x2_sum_y_sum - x_sum_xy_sum) / (n_x2_sum - x_sum_2)

        self.b1 = (n_xy_sum - x_sum_y_sum) / (n_x2_sum - x_sum_2)

        print("La ecuacion de regresion es la siguiente: ")
        print(f"y = {self.b0} + {self.b1}x")

    def predecir(self, valores):
        predicciones = []
        for valor in valores:
            predicciones.append(self.b0 + self.b1 * valor)
        return predicciones

modelo = LinearRegression()
modelo.calcular(advertising, sales)
valores = np.random.randint(0, 100, size=5)
predicciones = modelo.predecir(valores)

# Resultados
counter = 0
for valor in predicciones:
  print(f"La prediccion dado el valor {valores[counter]} es: {valor}")
  counter += 1